<rss version="2.0">
    <channel>    
        <title>Влад Костянецкий</title>
        <description>Привет! Меня зовут Влад, я — разработчик приложений для бизнеса.</description>
        <language>ru</language>
        <link>https://kostyanetsky.ru</link>
        <lastBuildDate>Tue, 21 Jul 2020 20:01:10 +0700</lastBuildDate>
        
        <item>
            <title>Блог на Vue.js</title>
            <link>https://kostyanetsky.ru/notes/vuejs-blog</link>
            <guid isPermaLink="false">note-vuejs-blog</guid>
            <pubDate>Tue, 21 Jul 2020 20:01:10 +0700</pubDate>
            <description><p>В середине прошлого года я <a href="https://kostyanetsky.ru//notes/so-much" target="_blank">загорелся</a> идеей переписать этот сайт на чем-то посовременнее PHP, выбрал Vue.js в качестве фреймворка и принялся за дело. JavaScript я на тот момент почти не знал, поэтому набил прорву шишек на кейсах в духе «метод вывода даты падает в Safari» — однако в итоге получил вполне жизнеспособное приложение.</p>
<p>Ну, как жизнеспособное? С одной стороны, главное у меня получилось — я разработал клиентское веб-приложение, которое ходит на сервер только за данными, а весь интерфейс собирает само. С другой — пришлось накрутить на фреймворк целую армию <s>костылей</s> хуков даже для самых простых штук (вроде подсветки элементов меню или, скажем, выдачи правильных кодов HTTP). Кое-что я вообще с наскока реализовать не смог — например, выдачу HTML-версий страниц для Яндекса (их пауки в 2020-м году не умеют индексировать сайты на JavaScript).</p>
<p>В общем, опыт вышел полезным, но результат — настолько спорным, что в конце концов я бросил эту затею, а получившегося Франкенштейна <a href="https://github.com/vkostyanetsky/VuejsBlog" target="_blank">выложил</a> на GitHub. Возможно, он кому-то сэкономит время на решение задач в духе «как вывести через Vue.js произвольный HTML» или «как научить VueI18n работать с русским языком».</p>
<p>Документации там нет, правда. Я сначала хотел подробно расписать, как что работает, но быстро понял, что потрачу уйму времени без видимой пользы. Вероятно, буду возвращаться к этой теме под настроение — а пока, так сказать, ограничимся парадигмой MVP :-)</p></description>
        </item>
        
        <item>
            <title>Firewatch</title>
            <link>https://kostyanetsky.ru/notes/firewatch</link>
            <guid isPermaLink="false">note-firewatch</guid>
            <pubDate>Sat, 22 Apr 2017 21:50:58 +0700</pubDate>
            <description><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/WexJcqgismA" width="560"></iframe>
<p>Обычная, человеческая такая история, и ей совершенно по-человечески чего-то не хватает. Какой-то искры, что ли? Идеи? Смысла? Чем ближе к развязке, тем сильнее становится ощущение, что в кастрюлю забыли налить супа.</p>
<p>Не, я не хочу сказать, что играть не стоит. Тут <strong>очень</strong> живые и здорово прописанные диалоги, которые делают три четверти атмосферы. Кроме того, игра неплохо выглядит (хотя я не очень понял, откуда в отзывах столько восторгов — в каком-нибудь «The Vanishing of Ethan Carter» виды встречались покруче) и в целом проходится на ура.</p>
<p>Но концовка сюжета откровенно скомкана, а кульминация просто отсутствует. Да, я в курсе насчёт заложенной философии — мол, это жизнь, бла-бла-бла, многоточий больше чем точек, бла-бла-бла. Но, камон! Если история ставит кучу вопросов и не отвечает ни на один из них — это не очень-то и круто, как ни ссылайся на age-check.</p></description>
        </item>
        
        <item>
            <title>Запускатор служб</title>
            <link>https://kostyanetsky.ru/notes/service-launcher</link>
            <guid isPermaLink="false">note-service-launcher</guid>
            <pubDate>Mon, 13 Jul 2020 20:15:07 +0700</pubDate>
            <description><p>Какое-то время назад я <a href="https://kostyanetsky.ru//notes/manage-services-with-powershell/" target="_blank">писал</a> про командлеты PowerShell, с помощью которых можно запускать и останавливать службы. В итоге я собрал из этих набросков нормальный скрипт: он читает список к запуску или остановке служб из отдельного файла, а ещё проверяет и (если нужно) запрашивает права администратора.</p>
<p>Результат можно <a href="https://github.com/vkostyanetsky/ServiceLauncher" target="_blank">посмотреть</a> на GitHub'е. No big deal — хотел поупражняться в языке и упростить ежедневную рутину: в моей системе наберется десятка полтора прожорливых сервисов, которые нужны для работы, но бесполезны в другое время. Вручную останавливать, а потом запускать этот зоопарк неудобно, а вот одной командой — совсем другое дело!</p></description>
        </item>
        
        <item>
            <title>Кегли на дороге</title>
            <link>https://kostyanetsky.ru/notes/skittles</link>
            <guid isPermaLink="false">note-skittles</guid>
            <pubDate>Mon, 03 Jun 2013 21:43:12 +0700</pubDate>
            <description><p>Интересно, какому проценту пешеходов, переходящих дорогу где придется, реально тяжело добраться до зебры, а какому — просто плевать на последствия? Недавно прочитал «<a href="http://mymaster.livejournal.com/344609.html" target="_blank">Откровения кегли</a>» (клёвую заметку Антона Буслова про ситуацию с зебрами с точки зрения больного человека) — но мне всё равно трудно поверить, что все эти упитанные и совсем не старые люди настолько измотаны, что не могут добраться до перехода.</p>
<p>Ладно я, велосипед легко маневрирует и быстро тормозит. А вот что испытывают водители автомобилей и мотоциклов — боюсь представить.</p></description>
        </item>
        
        <item>
            <title>Без комментариев</title>
            <link>https://kostyanetsky.ru/notes/no-comment</link>
            <guid isPermaLink="false">note-no-comment</guid>
            <pubDate>Wed, 08 Sep 2021 00:12:00 +0700</pubDate>
            <description><p>Сам не заметил, как бросил привычку педантично комментировать каждый метод, с которым приходится работать. Наверняка у этой практики есть какое-нибудь умное название, но мне нет дела, если честно. Я имею в виду стиль, когда описание добавляют к каждому осмысленному блоку кода:</p>
<script src="https://gist.github.com/vkostyanetsky/afae4dee09d639f34156d6c02b29c2a5.js">Суть</script>
<p>Смысл тут простой: когда копаешься в каком-нибудь дремучем легаси и бегаешь туда-сюда между хаотично раскиданными процедурами на три экрана каждая — логику каждой из них держать в голове довольно трудно. Первая же чашка кофе всё смоет. Поэтому такие заметки на полях здорово ускоряют ориентацию на местности, и чем больше времени проходит между подходами к коду — тем заметнее эффект.</p>
<p>Однако в какой-то момент стало понятно, что это ноу-хау — просто костыль, подпирающий откровенно хреновый дизайн кода. Попалась тебе длинная процедура или функция — вздохни, сядь и нарежь толстяка на методы поменьше. Сэкономишь и время, и нервы, и в коде разберешься быстрее, и Сонар порадуешь.</p></description>
        </item>
        
        <item>
            <title>Знак амперсанда в 1С</title>
            <link>https://kostyanetsky.ru/notes/ampersand-sign-in-1c</link>
            <guid isPermaLink="false">note-ampersand-sign-in-1c</guid>
            <pubDate>Thu, 27 Dec 2018 10:11:50 +0700</pubDate>
            <description><p>При обработке символа амперсанда в тексте надписей платформа применяет стандартный подход Windows: то есть, сам амперсанд не отобразится, а следующий после него символ станет горячей клавишей для действия, закрепленного за надписью (например, обработчика команды или события элемента).</p>
<p>Пример ниже выведется как «Project Costing». Символ «P» в ней будет подчеркнут и станет горячей клавишей; если это, например, заголовок команды, то её можно будет вызвать, нажав Alt + P.</p>
<pre><code>ТекстНадписи = "&amp;Project Costing";
</code></pre>
<p>Единственное неудобство — если нужно вывести амперсанд прямо в надпись. В этом случае символ следует удвоить: так, пример ниже будет выглядеть как «Project P&amp;L». Никаких горячих клавиш в таком случае создано не будет.</p>
<pre><code>ТекстНадписи = "Project P&amp;&amp;L";
</code></pre></description>
        </item>
        
        <item>
            <title>Самые большие зарплаты</title>
            <link>https://kostyanetsky.ru/notes/top-salaries</link>
            <guid isPermaLink="false">note-top-salaries</guid>
            <pubDate>Sat, 02 Oct 2021 16:49:35 +0700</pubDate>
            <description><blockquote>
<p>Есть путь до CSV-файла, надо его открыть, прочитать заголовок (первая строка), найти колонку Salary и вывести топ 10 зарплат.</p>
<p><em><a href="https://t.me/nikitonsky_chat/26402" target="_blank">Ссылка</a></em></p>
</blockquote>
<p>Вбросил свои <a href="https://gist.github.com/tonsky/881d5d8c4fbed818fe2905a7591a91e0#file-vkostyanetsky-1c" target="_blank">пять копеек</a> просто для полноты картины. Если забить на стабильность, читаемость и производительность — можно усечь где-то вдвое. Тут с самого начала было очевидно, что на баше выйдет короче, а на питоне проще — так что просто написал как привык.</p>
<p>Из полезного: в комментариях к сообщению куча примеров на других языках. С некоторыми вообще до сих пор не сталкивался; было реально любопытно посмотреть на синтаксис и попробовать понять подход.</p>
<p>В целом история напомнила <a href="https://bolknote.ru/tags/beer99/" target="_blank">хобби</a> Евгения Степанищева — писать вывод американской «песни о пиве» на всех языках подряд. Задача с чтением CSV, кстати, мне тоже кажется скорее фаном — слишком узкий кейс, чтобы на его базе что-то всерьёз сравнивать.</p>
<p>Из смешного: у пары <a href="https://t.me/nikitonsky_pub/201?comment=26703" target="_blank">коллег</a> язык 1С вызвал настолько острые проблемы со зрением, что они сочли нужным об этом сообщить :-) Отчасти понимаю желание самоутвердиться на стереотипе «1С — это плохо, понятненько?», но тут момент явно выбран неудачно. Предпочтения в синтаксисе — дело вкуса, а кроме них решение на 1С никак не отличается от решений на любом другом языке, где нет встроенной библиотеки для парсинга CSV.</p></description>
        </item>
        
        <item>
            <title>Запросы и ожидания на блокировках</title>
            <link>https://kostyanetsky.ru/notes/queries-and-lock-waits</link>
            <guid isPermaLink="false">note-queries-and-lock-waits</guid>
            <pubDate>Mon, 19 Oct 2020 06:23:06 +0700</pubDate>
            <description><p>Набросал ещё два скрипта для анализа ТЖ: <a href="https://github.com/vkostyanetsky/ScriptsFor1C/blob/master/Технологический%20журнал/LongestQueries.sh" target="_blank">первый</a> строит топ тяжелых запросов к MS SQL, <a href="https://github.com/vkostyanetsky/ScriptsFor1C/blob/master/Технологический%20журнал/LongestLockWaitsByRegions.sh" target="_blank">второй</a> — топ длительных ожиданий на блокировках.</p>
<p>Тяжелые запросы определяются по продолжительности событий DBMSSQL. То есть, чем дольше выполнялся запрос — тем вероятнее, что в процессе он слопал кучу ресурсов. Обычно это так и есть, хотя для нормальной диагностики нужно смотреть трассировку.</p>
<p>Ожидания на блокировках тоже считаются по продолжительности. При этом скрипт проверяет, что у события TLOCK заполнено свойство WaitConnections — то есть платформа действительно ждала возможности установить блокировку, а не просто потратила какое-то время на её установку.</p></description>
        </item>
        
        <item>
            <title>Рецепт торта</title>
            <link>https://kostyanetsky.ru/notes/cake-recipe</link>
            <guid isPermaLink="false">note-cake-recipe</guid>
            <pubDate>Tue, 03 Dec 2013 21:43:16 +0700</pubDate>
            <description><p>На курсах английского разбирали тему кухни — посуда, мебель, еда, вот это всё. Зачитал <a href="https://www.youtube.com/watch?v=fXzr5iwGFfE" target="_blank">рецепт торта</a> из Portal как пример блюда, которое готовится из множества компонентов. Имел определенный успех :-)</p>
<p>Кстати, редкий случай отличной локализации: в русской версии игры этот монолог (да и все остальные реплики GLaDOS) звучат куда выразительнее.</p></description>
        </item>
        
        <item>
            <title>Зачем нужен ЦУП?</title>
            <link>https://kostyanetsky.ru/notes/what-is-pmc-for</link>
            <guid isPermaLink="false">note-what-is-pmc-for</guid>
            <pubDate>Sun, 24 Nov 2019 15:46:53 +0700</pubDate>
            <description><p>ЦУП нужен, чтобы:</p>
<ol>
<li>Найти в системе узкое место (медленный код, тяжелый запрос);</li>
<li>Расследовать конкретные блокировки или взаимоблокировки.</li>
</ol>
<p>В первом случае можно включить анализ запросов и, допустим, серверных вызовов. По результатам можно понять, что в системе грузит сервер приложений, а что — сервер СУБД. Часто так делают даже не решая конкретную проблему, а просто чтобы устранить узкие места и увеличить запас прочности системы на будущее.</p>
<p>Во втором сценарии включают анализ блокировок или взаимоблокировок — когда знают, что они есть в системе, и хотят получить отчет: кто заблокировал, кого, когда, на какой строчке кода и так далее.</p>
<p>В обеих случаях мониторинг запускают только в периоды основной нагрузки и минут на десять-пятнадцать. Массив исходных данных получается сравнительно небольшим (ЦУП'у нужно его обработать перед выдачей результата, чем больше данных — тем больше времени потребуется). Кроме того, не будет собрано лишних данных — например, не будет анализа нагрузки от регламентных работ, которые вы проводите ночью.</p>
<p>Кроме того, это снижает влияние сбора данных на работу системы. Дело в том, что ЦУП может собирать очень тяжелый ТЖ, способный заметно нагрузить железо (на 30% медленнее? подержи мое пиво). С этим лучше быть осторожным.</p>
<p>Для всего, что перечислено выше, достаточно аналитических показателей ЦУП'а: анализа запросов, ожиданий на блокировках, анализа взаимоблокировок 1С и MS SQL. Что до оперативных показателей — количества выполняемых запросов, суммарного времени их выполнения и так далее — то популярностью они не пользуются. Польза от них обычно не стоит времени на настройку, и ЦУП по большому счету никогда не проектировался для того, чтобы постоянно собирать их.</p></description>
        </item>
        
    </channel>
</rss>