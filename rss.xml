<rss version="2.0">
    <channel>    
        <title>Влад Костянецкий</title>
        <description>Привет! Меня зовут Влад, я — разработчик приложений для бизнеса.</description>
        <language>ru</language>
        <link>https://kostyanetsky.ru</link>
        <lastBuildDate>Sun, 12 May 2024 17:50:58 +0700</lastBuildDate>
        
        <item>
            <title>Таймшит для Обсидиана</title>
            <link>https://kostyanetsky.ru/notes/obsidian-timesheet</link>
            <guid isPermaLink="false">note-obsidian-timesheet</guid>
            <pubDate>Sun, 12 May 2024 17:50:58 +0700</pubDate>
            <description><p>Написал ещё один плагин к <a href="https://obsidian.md" target="_blank">Obsidian</a>, на этот раз — для <a href="https://help.obsidian.md/Plugins/Daily+notes" target="_blank">ежедневных заметок</a>. Рисует симпатичный отчет: над какими задачами работал, что сделал, сколько времени потратил. Я постарался описать в <a href="https://github.com/vkostyanetsky/ObsidianTimesheet" target="_blank">репозитории</a>, как это работает; буду рад, если кому-то ещё пригодится!</p>
<p>Забавный момент: для примеров в README я использовал номера задач FBI-1, FBI-2 и так далее. Это не отсылка к X-Files или Twin Peaks — просто первое, что пришло мне в голову. Дело в том, что наш внутренний проект по разработке FirstBit ERP называется First Bit Internal, сокращенно — FBI. Основной пул задач, над которыми мы работаем, живёт именно в нём.</p>
<p>Мы-то уже привыкли, но коллег вне компании наши скриншоты из JIRA или SonarQube неизменно веселят. Представили, что вы — агент Купер? А мне и представлять не надо :)</p></description>
        </item>
        
        <item>
            <title>Запросом больше, запросом меньше</title>
            <link>https://kostyanetsky.ru/notes/payment-terms</link>
            <guid isPermaLink="false">note-payment-terms</guid>
            <pubDate>Sun, 05 May 2024 21:25:48 +0700</pubDate>
            <description><p>Регулярно слышу тейк: запросом больше, запросом меньше — без разницы. Мол, главное, чтобы запрос был дешевым: не читал лишнего, попадал в индекс и так далее.</p>
<p>Эта точка зрения имеет право на жизнь, однако бездумно пулеметить запросами — опасная затея. Даже если в моменте все выглядит хорошо, в будущем система может слегка поменяться. А потом внешне безобидный патч положит вам прод в пятницу.</p>
<p>Пример из недавней практики. Есть ERP, в которой лежит таблица с этапами оплаты по заказам клиентов. Один из таких этапов — предоплата; пока она не внесена, создать заказ поставщику нельзя. </p>
<p>Технически в заказе поставщику просто хранится ID заказа клиента; если последний заполнен (то есть, заказ поставщику создан под заказ клиента), ERP нужно прочитать этапы оплаты по заказу клиента и понять, можно ли делать закупку. </p>
<p>Звучит элементарно, однако мониторинг показывает: операция тормозит и жрет память, будто в последний раз. Лезем разбираться. Видим примерно такую картинку:</p>
<p><img alt="825701 записей" src="https://kostyanetsky.ru/notes/payment-terms/payment-terms.png"/></p>
<p>То есть вместо того, чтобы выдернуть два-три этапа оплаты по заказу, ERP получает без малого миллион! Как так? </p>
<p>Опуская детали: проблема рождалась в тех заказах поставщику, которые вообще не были связаны с заказом клиента. Разработчик посчитал, что для них можно не менять логику: ID заказа клиента пустой и запрос не найдет для него этапов оплаты. А значит, получится тот же результат, как если бы запроса вообще не было. А лишний запрос — ну... Запросом больше, запросом меньше... Тоже мне, большое дело.</p>
<p>Оказалось, большое. В таблице этапов оплаты оказались данные не только для заказов клиентов, но и для других видов документов. Поле с ID заказа клиента у них было пустым. В итоге ERP при попытке найти этапы оплаты по пустому ID заказа клиента находила такие записи — и, как видите, немало.</p>
<p>Запрос читал порядка гигабайта данных и помещал во временную таблицу. Гигабайт прочитали, гигабайт записали... История била и по диску, и по буферному кэшу СУБД, и по другим частям системы (вплоть до сети, которой этот гигабайт приходилось гонять туда-сюда без всякой пользы).</p>
<p>В общем, знаете, что я думаю? Если результат запроса известен — наверное, его все-таки не нужно делать.</p></description>
        </item>
        
        <item>
            <title>Фудиари для Обсидиана</title>
            <link>https://kostyanetsky.ru/notes/obsidian-foodiary</link>
            <guid isPermaLink="false">note-obsidian-foodiary</guid>
            <pubDate>Sun, 14 Apr 2024 22:36:58 +0700</pubDate>
            <description><p>Вслед за <a href="https://kostyanetsky.ru/notes/obsidian-fastimer" target="_blank">первым</a> плагином для Obsidian пару недель назад выкатил <a href="https://github.com/vkostyanetsky/ObsidianFoodiary" target="_blank">второй</a>. Считает КБЖУ (калории, белки, жиры и углеводы) в пище. Помогает не переедать на пустом месте — всё-таки на глаз трудно оценить, сколько слопал за день, и можно ли позволить себе вон тот пончик.</p>
<p>Короче, полезная штука, если вы:</p>
<ol>
<li>Толстяк (как я)</li>
<li>Хотите перестать им быть (как я)</li>
<li>Ведете заметки в Obsidian (как я) 🙂</li>
</ol>
<p>На самом деле, программ для этой задачи полным-полно (я перепробовал штук десять). Остался недоволен: либо страшная, либо глючит, либо постоянно пытается всучить ежемесячную подписку. Короче, больше раздражает, чем помогает. Хочется чего-то нативного, встроенного в обычную рутину — и если она оседает в Obsidian, то решение напрашивается само собой.</p>
<p>Установить плагин можно прямо из программы — разработчики его уже одобрили. В остальном всё просто: пишем в ежедневной заметке, что съели и сколько это весило, и в ответ получаем компактную табличку с сортировкой по калориям и числам по белкам, жирам и углеводам. </p>
<p>В репозитории по ссылке выше есть примеры.</p></description>
        </item>
        
        <item>
            <title>Внешний вид Фастаймера</title>
            <link>https://kostyanetsky.ru/notes/callouts-for-fastimer</link>
            <guid isPermaLink="false">note-callouts-for-fastimer</guid>
            <pubDate>Sat, 09 Mar 2024 17:44:32 +0700</pubDate>
            <description><p>Завернул отрисовку <a href="https://kostyanetsky.ru/notes/obsidian-fastimer" target="_blank">Фастаймера</a> через выноски: это механика Obsidian, позволяющая превращать обычную цитату в оформленный блок текста, привлекающий внимание читателя. Вы наверняка видели блоки в духе «совет» и «обрати внимание» — вот это и есть выноски. </p>
<p>Подробнее можно прочитать в <a href="https://help.obsidian.md/Editing+and+formatting/Callouts" target="_blank">справке</a> Obsidian.</p>
<p>В общем, теперь таймер принимает разный цвет в зависимости от состояния (активный интервал — голубой, успех — зеленый, провал — красный). Кроме того, я немного уплотнил текст и отточил формулировки:</p>
<p><img alt="Пример" src="https://kostyanetsky.ru/notes/callouts-for-fastimer/example.png"/></p>
<p>Получилось компактнее и симпатичнее простого блока текста, который я использовал до этого.</p></description>
        </item>
        
        <item>
            <title>Маленькие радости</title>
            <link>https://kostyanetsky.ru/notes/small-pleasures</link>
            <guid isPermaLink="false">note-small-pleasures</guid>
            <pubDate>Wed, 06 Mar 2024 21:22:43 +0700</pubDate>
            <description><p>Скучаю в очереди на кассу супермаркета: вечер, покупателей уже не очень много, но пожилая кассирша явно устала и не слишком торопится. Стоящий впереди высокий, седой мужчина с роскошной бородой коротает время, изучая стойку с шоколадками рядом с кассой. </p>
<p>Наконец, берет «Сникерс», задумчиво крутит его в руках. Пододвигает себе ещё два и широко, с видимым удовольствием улыбается в усы :)</p></description>
        </item>
        
        <item>
            <title>Не только лишь все</title>
            <link>https://kostyanetsky.ru/notes/not-only-everything</link>
            <guid isPermaLink="false">note-not-only-everything</guid>
            <pubDate>Sun, 25 Feb 2024 22:49:48 +0700</pubDate>
            <description><p>Завидной глубины комментарий из документации к методу WriteJSON() XDTOSerializer'а:</p>
<p><img alt="Не только лиь все" src="https://kostyanetsky.ru/notes/not-only-everything/write-json.jpg"/></p>
<p>Ну да, метод дампит данные в JSON, а не в XML. Так что поспорить сложно, не все типы данных можно упаковать в XML с его помощью (если быть точным — никакие). Если бы дальше не пошла очевидная копипаста из справки к WriteXML() — счёл бы пасхалкой от разработчиков :)</p></description>
        </item>
        
        <item>
            <title>Фастаймер для Обсидиана</title>
            <link>https://kostyanetsky.ru/notes/obsidian-fastimer</link>
            <guid isPermaLink="false">note-obsidian-fastimer</guid>
            <pubDate>Tue, 13 Feb 2024 01:08:58 +0700</pubDate>
            <description><p>Разработчики <a href="https://obsidian.md" target="_blank">Obsidian</a> на днях заапрувили один из моих пет-плагинов на TypeScript — <a href="https://github.com/vkostyanetsky/ObsidianFastimer" target="_blank">Фастаймер</a>, трекер интервального голодания. Он добавляет в хранилище новый блок кода: вводишь в него дату начала окна голодания и получаешь дату завершения, время до этого момента и раскладку по зонам, которые предстоит пройти. </p>
<p>Блок показывает актуальную картину каждый раз, когда Obsidian его отрисовывает — то есть, можно следить за своим прогрессом в реальном времени. Когда окно голодания закончится, можно ввести дату завершения и блок покажет результат: получилось ли выполнить цель, сколько времени сверх плана вы голодали и так далее.</p>
<p>Думаю немного доработать визуальную часть (сейчас всё выводится текстом без какого-либо оформления). А ещё — прикрутить функции расчета статистики, чтобы можно было на ходу рисовать красивые графики в духе <a href="https://charts.phib.ro/Meta/Charts/Charts+Documentation" target="_blank">Charts</a> и показывать ачивки. У меня была эта механика в <a href="https://github.com/vkostyanetsky/Fastimer" target="_blank">реализации</a> этого же приложения на Python, но я вряд ли к ней вернусь — в хранилище Obsidian эту задачу решать проще, чем раскатывать на компьютер дополнительную утилиту.</p>
<p>Короче, зацените плагин! :) В библиотеке Обсидиана его можно найти по имени (Fastimer). Или, при желании, установить вручную из репозитория.</p></description>
        </item>
        
        <item>
            <title>Do? Do Not?</title>
            <link>https://kostyanetsky.ru/notes/do-not</link>
            <guid isPermaLink="false">note-do-not</guid>
            <pubDate>Sun, 14 Jan 2024 22:25:45 +0700</pubDate>
            <description><p>На одном из проектов у нас есть две общающиеся друг с другом системы: ERP и CRM. Обмен данными сделан по-взрослому: поднят push'n'pull сервер, прописаны подписки на события, подняты REST API и много другой интересной технической обвязки, но я сейчас не про неё.</p>
<p>Среди прочей логики, там так: если в CRM появляется новый контрагент — его данные отправляются в ERP. На днях с этим возникла проблема: один из контрагентов не отправлялся из CRM ну вот вообще никак, сколько его не записывай. Полезли разбираться, подозревая худшее: CRM написана на PHP (ничего личного, просто это не наш технический стек) и там много разного легаси. Выстрелить себе в ногу проще, чем высморкаться. </p>
<p>Однако особенно долго копаться не понадобилось. Открыли страницу контрагента в CRM и увидели, что у него стоит галка «Do Not Export To ERP», которая, собственно, блокирует отправку. Короче, очевидная ошибка какого-то менеджера. </p>
<p>Убираем галку, закрываем тикет?</p>
<p><img alt="Well yes, but actually no" src="https://kostyanetsky.ru/notes/do-not/actually.jpg"/></p>
<p>Это решит проблему с этим конкретным контрагентом, но не причину, по которой она возникла. А она в интерфейсе, конкретно — в названии опции: используется «do not», которого желательно избегать из-за того, что пользователям сложнее правильно считать формулировку. К простому «do» это, кстати, тоже относится.</p>
<p>Программистам часто непросто понять, почему так: мы привыкли мгновенно рассчитывать в уме булевые выражения и вариации в духе «не (не истина)» для нас — обычное дело. А вот люди с другим бэкграундом могут путаться. Совсем чуточку, но иногда и этого достаточно, чтобы в горячке дня воспринять «do not export» как «do export», ткнуть опцию и побежать дальше.</p>
<p>Отсюда выводим правильное решение: переименовать галку. Подойдёт «Disable Export» или «Stop Export». В голову ещё приходит «Prohibit Export», но это скорее про межличностные отношения и вообще, запрет что-то делать не означает, что это что-то не будет сделано :)</p></description>
        </item>
        
        <item>
            <title>Последний мет</title>
            <link>https://kostyanetsky.ru/notes/last-meth</link>
            <guid isPermaLink="false">note-last-meth</guid>
            <pubDate>Sun, 17 Dec 2023 19:34:42 +0700</pubDate>
            <description><p>Роюсь в коде внешней компоненты 1С, опубликованный разработчиками платформы как пример у себя на сайте. Из хорошего: ну, она компилируется и, если немного допилить — действительно работает. </p>
<p>В остальном хватает bruh moments: например, проект не открывается в современной Visual Studio (нужно указывать CMake вручную). Код довольно небрежный, документации нет, комментариев и оформления по большому счёту тоже. Разработчику без опыта в С++ может быть непросто вкатиться.</p>
<p>Позабавил нейминг:</p>
<pre><code>long CAddInNative::FindMethod(const WCHAR_T* wsMethodName)
{ 
    long plMethodNum = -1;
    wchar_t* name = 0;

    ::convFromShortWchar(&amp;name, wsMethodName);

    plMethodNum = findName(g_MethodNames, name, eMethLast);

    if (plMethodNum == -1)
        plMethodNum = findName(g_MethodNamesRu, name, eMethLast);

    delete[] name;

    return plMethodNum;
}
</code></pre>
<p>Со строк выше на нас смотрит необъяснимая любовь автора кода к сокращениям: вот что ему мешало назвать переменную "eMethodLast", а не "eMethLast"? В конце концов, у нас уже есть "wsMethodName" и "plMethodNum". </p>
<p>Возможно, это такая пасхалка с отсылкой на Breaking Bad. Тогда, конечно, уверенный лайк :)</p></description>
        </item>
        
        <item>
            <title>Пропущенный съезд</title>
            <link>https://kostyanetsky.ru/notes/wrong-freeway-entrance</link>
            <guid isPermaLink="false">note-wrong-freeway-entrance</guid>
            <pubDate>Tue, 14 Nov 2023 09:34:10 +0700</pubDate>
            <description><blockquote>
<p>Вы когда-нибудь пропускали свой съезд с шоссе? Нужно всего лишь доехать до следующего, чтобы развернуться, но каждый дюйм дороги вызывает отвращение, потому что ты удаляешься от цели.</p>
<p><em>― Энди Вейер, «Марсианин»</em></p>
</blockquote>
<p>У программистов бывают ровно те же эмоции, когда они долго пилят какую-то систему и внезапно осознают, что один из её компонентов стоит задизайнить иначе. В этот момент рождается технический долг: понимаешь, что именно так и придется поступить, так как это разом закроет несколько проблем.</p>
<p>Однако прямо сейчас, в моменте, не меняется ничего: ты продолжаешь пилить код вокруг того компонента, что есть. Ведь у тебя есть сроки на разработку, и ты профессионал! Нужно всего лишь выпустить релиз, чтобы вернуться к техдолгу, но каждый дюйм написанного кода вызывает отвращение, потому что ты удаляешься от цели.</p></description>
        </item>
        
    </channel>
</rss>