<rss version="2.0">
    <channel>    
        <title>Влад Костянецкий</title>
        <description>Привет! Меня зовут Влад, я — разработчик приложений для бизнеса.</description>
        <language>ru</language>
        <link>https://kostyanetsky.ru</link>
        <lastBuildDate>Wed, 15 Sep 2021 21:47:48 +0700</lastBuildDate>
        
        <item>
            <title>Про молоток и гвозди</title>
            <link>https://kostyanetsky.ru/notes/hammer-and-nails</link>
            <guid isPermaLink="false">note-hammer-and-nails</guid>
            <pubDate>Wed, 15 Sep 2021 21:47:48 +0700</pubDate>
            <description><p>На днях допиливал платежные документы в нашей конфигурации и наткнулся на невероятно избыточное решение примитивной задачи. Простите, не  могу держать в себе.</p>
<p>Вот есть у вас документ, да? В нём — несколько табличных частей. В каждой — поле для комментария. Делаете вы для этого документа печатную форму; если хотя бы в одной строке любой ТЧ есть комментарий — нужно использовать один шаблон, если комментариев нет — другой.</p>
<p>Задача примитивная, все мы миллион раз такое делали — ну, смотрим в выборку строк, натравливаем ПустаяСтрока() на нужное поле и грузим подходящий шаблон. Готово, можно пить кофе!</p>
<p>Однако, вместо короткого цикла я увидел это:</p>
<script src="https://gist.github.com/vkostyanetsky/e870d5bb3d2f23d93f3d17001eaef59b.js">Суть</script>
<p>Ну то есть да, делаем матрешку из подзапросов, в самом нижнем из которых роемся в ТЧ (которые мы, напомню, только что выгребали для вывода на печатную форму). Ищем в них комментарии, если есть — ставим единичку. Нет? Нолик. Итог несколько раз группируем и возвращаем в скрипт.</p>
<p>Я сейчас даже не про нагрузку на СУБД (рискну предположить, что заметного эффекта этот трюк не дает — в конце концов, после отбора по ссылке выборка будет копеечной). Просто… Ну… Чекнуть выборку строк — пять строк кода. Понятных, простых, коротких, Сонару ругнуться негде. Как можно было родить вот это? Из большой любви к запросам? </p>
<p>А ведь что-то в этом духе и было, скорее всего. Я почти вижу его, этого кодера, который только что более-менее сносно освоил запросы и пребывает в перманентном восторге от новых возможностей. А когда в руках есть клёвый блестящий молоток, всё вокруг кажется гвоздями.</p></description>
        </item>
        
        <item>
            <title>Смотри не перепутай</title>
            <link>https://kostyanetsky.ru/notes/do-not-confuse</link>
            <guid isPermaLink="false">note-do-not-confuse</guid>
            <pubDate>Wed, 16 Mar 2022 20:09:31 +0700</pubDate>
            <description><p><img alt="Код" src="https://kostyanetsky.ru/notes/do-not-confuse/do-not-confuse.png"/></p>
<p>Если вид операции — продажа товара или недвижимости, то открой общую форму AdvancesPickFormWithVAT с параметрами, описанными в структуре PickParameters. Колбеком будет метод EditPrepaymentOffsetEnd, описанный в этом же модуле; передай ему структуру AdditionalParameters. Форму нужно открыть так, чтобы она заблокировала весь интерфейс.</p>
<p>А вот если вид операции — возврат поставщику, то открой общую форму AdvancesPickFormWithVAT с параметрами, описанными в структуре PickParameters. Колбеком будет метод EditPrepaymentOffsetEnd, описанный в этом же модуле; передай ему структуру AdditionalParameters. Форму нужно открыть так, чтобы она заблокировала весь интерфейс.</p>
<p>Смотри не перепутай.</p></description>
        </item>
        
        <item>
            <title>Пустая() или ЗначениеЗаполнено()?</title>
            <link>https://kostyanetsky.ru/notes/is-ref-empty</link>
            <guid isPermaLink="false">note-is-ref-empty</guid>
            <pubDate>Sat, 11 Apr 2020 12:24:12 +0700</pubDate>
            <description><p>Несколько дней назад обсуждал с коллегой, какой способ проверки заполнения ссылки лучше. С одной стороны, время назад на каком-то курсе я слышал авторитетное мнение, что функцию ЗначениеЗаполнено() нужно использовать с осторожностью, так как её логика — сопоставлять переменную всем возможным пустым значениям, которые есть в конфигурации. И это, мол, огромная тормозная лапша. Как альтернативу автор курса советовал использовать метод ссылки Пустая(), а композитные реквизиты проверять примерно так:</p>
<pre><code>СсылкаЗаполнена = Ссылка &lt;&gt; Неопределено И Не Ссылка.Пустая();
</code></pre>
<p>Коллега в свою очередь утверждал, что ЗначениеЗаполнено() быстрее, так как это встроенная функция, которая не тратит время на поиск метода у объекта (в скриптовых языках это сравнительно медленная операция).</p>
<p>На моей памяти ни тот, ни другой метод узким местом никогда не были, но меня разобрало любопытство; написал <a href="https://github.com/vkostyanetsky/IsEmptyOrValueIsFilled" target="_blank">тест</a>, который проверяет ссылочную переменную на пустое значение обеими способами и замеряет время, которое было потрачено. </p>
<p>В среднем результат выглядит <a href="https://kostyanetsky.ru/notes/is-ref-empty/is-ref-empty.png" target="_blank">примерно так</a>. Там четыре шага — на первых двух предполагается, что ссылка определена, а на третьем и четвертом добавляется соответствующая проверка. В последней колонке таблицы виден контекст выполнения теста (клиент или сервер).</p>
<p>Вывод довольно очевиден: ЗначениеЗаполнено() никакой деградации не показывает, более того — работает быстрее, чем метод Пустая() (особенно если мы начинаем проверять переменную на Неопределено). Конечно, отклонение не слишком значительное, но на каких-то длительных регламентных операциях вполне можно сэкономить пару секунд.</p>
<p>Да и чисто практически проще делать проверку одним универсальным вызовом, а не пытаться угадать все возможные значения переменной.</p></description>
        </item>
        
        <item>
            <title>Идеальное произношение</title>
            <link>https://kostyanetsky.ru/notes/ideal-pronunciation</link>
            <guid isPermaLink="false">note-ideal-pronunciation</guid>
            <pubDate>Mon, 15 Oct 2018 06:25:01 +0700</pubDate>
            <description><p><a href="https://twitter.com/vanswan/status/1051001827104178177" target="_blank"><img alt="Твит" src="https://kostyanetsky.ru/notes/ideal-pronunciation/snap-tweet-vanswan-1051001827104178177.png"/></a></p>
<p>Примерно то же самое я услышал несколько лет назад от инженера Bloomberg'а — мы тогда писали для заказчика программу, автоматически следящую за курсами акций, и столкнулись с кучей проблем (для работы с финансовыми инструментами Bloomberg дает мощный, но довольно сложный API).</p>
<p>В конце концов дело дошло до диалога с техподдержкой, и после обмена несколькими сообщениями коллега предложил пообщаться голосом. Я здорово смутился и заметил, что, мол, так-то можно, но my English isn't fluent enough. На это собеседник лишь пожал плечами: мол, мы привыкли — английский используется повсеместно, и обратная сторона медали в том, что его везде крутят на свой лад. Так что правильное ударение — последнее, что его будет волновать, лишь бы была понятна мысль.</p></description>
        </item>
        
        <item>
            <title>Халк удалять!</title>
            <link>https://kostyanetsky.ru/notes/hulk-removes</link>
            <guid isPermaLink="false">note-hulk-removes</guid>
            <pubDate>Mon, 09 Nov 2020 16:03:07 +0700</pubDate>
            <description><p>На <a href="https://postgrespro.ru/education/courses/DBA1" target="_blank">курсе</a> по PostgreSQL узнал смешную деталь: в 10-й версии СУБД разработчики переименовали папку pg_xlog (журналы предзаписи) в pg_wal, а папку pg_clog (статусы транзакций) — в pg_xact.</p>
<p>Знаете, почему? Из-за не слишком опытных, но уже достаточно смелых администраторов, которые триггерились на слово «log» в названии папки. Мол, мне нужно место на диске освободить, а тут СУБД забила всё своими дурацкими логами. Некогда разбираться, rm -rf их и порядок!</p>
<p>В общем, в трубу одновременно вылетала и защита работы с данными в буферном кэше, и многоверсионность. После чего кластер умирал в муках. Свободного места на диске получалось много, но радоваться этому, боюсь, приходилось недолго :-)</p></description>
        </item>
        
        <item>
            <title>Пучок скриптов</title>
            <link>https://kostyanetsky.ru/notes/bunch-of-scrips</link>
            <guid isPermaLink="false">note-bunch-of-scrips</guid>
            <pubDate>Sat, 24 Apr 2021 10:00:00 +0700</pubDate>
            <description><p>Выложил на GitHub ещё несколько скриптов для разбора технологического журнала платформы, которые написал за последнее время:</p>
<ul>
<li><a href="https://github.com/vkostyanetsky/ScriptsFor1C/blob/master/Технологический журнал/FrequentEvents.sh" target="_blank">Частотные события</a>. Группирует события по наименованию, считает количество воспроизведений для каждого и выводит в порядке убывания — от наиболее частотного к наименее частотному. Практического применения у этого скрипта, скорее, нет; просто фиксировал для себя, какой процесс кластера какие события пишет.</li>
<li><a href="https://github.com/vkostyanetsky/ScriptsFor1C/blob/master/Технологический журнал/ExceptionDescriptions.sh" target="_blank">Описания исключений</a>. Группирует EXCP по полю Name; для каждого наименования выводит варианты значений поля Description, которые были у исключений с таким наименованием. С помощью этого скрипта можно составить примерную картину: какие исключения действительно проблема, а какие — просто белый шум, который можно игнорировать и, например, закинуть в фильтры Кибаны.</li>
<li><a href="https://github.com/vkostyanetsky/ScriptsFor1C/blob/master/Технологический журнал/LocksByConnectIDAndRegions.sh" target="_blank">Блокировки по ID соединения и области</a>. Удобен для поиска виновника таймаута на управляемых блокировках: скрипт выгребает из ТЖ все TLOCK'и по конкретной области от конкретного соединения, а потом выстраивает их в хронологическом порядке.</li>
</ul></description>
        </item>
        
        <item>
            <title>Повествование через окружение</title>
            <link>https://kostyanetsky.ru/notes/environmental-storytelling</link>
            <guid isPermaLink="false">note-environmental-storytelling</guid>
            <pubDate>Sun, 19 Mar 2023 15:51:48 +0700</pubDate>
            <description><p>Люблю замечать в окружающем мире штуки, за которыми явно стоит какая-то история. В видеоиграх это называют "повествованием через окружение": напрямую тебе историю не рассказывают, но если посмотреть по сторонам — можно догадаться, какое ружье висело на стенке и кто из него пальнул.</p>
<p>Например, недавно отмечал с коллегами десятилетие компании в местном гольф-клубе. Шары нужно было отправлять в полет со второго этажа; перил там по понятным причинам нет, но натянута сетка на случай, если кто-то потеряет равновесие.</p>
<p><img alt="Фотка с сайта клуба, чтобы было понятнее." src="https://kostyanetsky.ru/notes/environmental-storytelling/topgolf.jpeg"/></p>
<p>Рядом висят предупреждения: прыгнете в сетку своим хотением — заплатите <abbr title="Порядка двухста тысяч рублей на этот момент.">десять тысяч дирхам</abbr>. Запишете этот прыжок веры на камеру — готовьте ещё пять тысяч.</p>
<p>Чувствуется история за кулисами, да?</p>
<p>Или, скажем, летал как-то в Турцию отдыхать и решил на всякий случай полистать правила авиакомпании (что можно брать на борт, чего нельзя). Среди списка запрещенных к проносу на борт предметов нашёл пункты «стальное копье» и «стальной кистень» 😬</p>
<p>UPD: Ещё один отличный <a href="https://kostyanetsky.ru/notes/environmental-storytelling/soundproof.jpeg" target="_blank">пример</a> откуда-то из сети.</p></description>
        </item>
        
        <item>
            <title>Самые большие зарплаты</title>
            <link>https://kostyanetsky.ru/notes/top-salaries</link>
            <guid isPermaLink="false">note-top-salaries</guid>
            <pubDate>Sat, 02 Oct 2021 16:49:35 +0700</pubDate>
            <description><blockquote>
<p>Есть путь до CSV-файла, надо его открыть, прочитать заголовок (первая строка), найти колонку Salary и вывести топ 10 зарплат.</p>
<p><em><a href="https://t.me/nikitonsky_chat/26402" target="_blank">Ссылка</a></em></p>
</blockquote>
<p>Вбросил свои <a href="https://gist.github.com/tonsky/881d5d8c4fbed818fe2905a7591a91e0#file-vkostyanetsky-1c" target="_blank">пять копеек</a> просто для полноты картины. Если забить на стабильность, читаемость и производительность — можно усечь где-то вдвое. Тут с самого начала было очевидно, что на баше выйдет короче, а на питоне проще — так что просто написал как привык.</p>
<p>Из полезного: в комментариях к сообщению куча примеров на других языках. С некоторыми вообще до сих пор не сталкивался; было реально любопытно посмотреть на синтаксис и попробовать понять подход.</p>
<p>В целом история напомнила <a href="https://bolknote.ru/tags/beer99/" target="_blank">хобби</a> Евгения Степанищева — писать вывод американской «песни о пиве» на всех языках подряд. Задача с чтением CSV, кстати, мне тоже кажется скорее фаном — слишком узкий кейс, чтобы на его базе что-то всерьёз сравнивать.</p>
<p>Из смешного: у пары <a href="https://t.me/nikitonsky_pub/201?comment=26703" target="_blank">коллег</a> язык 1С вызвал настолько острые проблемы со зрением, что они сочли нужным об этом сообщить :-) Отчасти понимаю желание самоутвердиться на стереотипе «1С — это плохо, понятненько?», но тут момент явно выбран неудачно. Предпочтения в синтаксисе — дело вкуса, а кроме них решение на 1С никак не отличается от решений на любом другом языке, где нет встроенной библиотеки для парсинга CSV.</p></description>
        </item>
        
        <item>
            <title>Сикока сикока?</title>
            <link>https://kostyanetsky.ru/notes/so-much</link>
            <guid isPermaLink="false">note-so-much</guid>
            <pubDate>Wed, 05 Jun 2019 20:27:34 +0700</pubDate>
            <description><p>Этот сайт почти полностью написан на PHP. JavaScript на клиенте используется ситуативно — редирект сделать, картинку показать и так далее.</p>
<p>Для личного ресурса ничего сложнее и не нужно, но некоторое время назад мне приспичило слегка освежить свои навыки веб-разработки. В качестве платформы для эксперимента я выбрал Vue.js — популярный, быстрый и не слишком сложный фреймворк.</p>
<p>Я, собственно, к чему это всё пишу. Развернул тут Node.js, Vue CLI, создал первый проект — и чуть не поседел. Триста мегабайт джаваскрипта прямо со старта?! Серьёзно?!</p></description>
        </item>
        
        <item>
            <title>White Day</title>
            <link>https://kostyanetsky.ru/notes/white-day</link>
            <guid isPermaLink="false">note-white-day</guid>
            <pubDate>Wed, 17 Jan 2018 21:16:27 +0700</pubDate>
            <description><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/VRiYZbAmun4" width="560"></iframe>
<p>Может, этот хоррор и нишевый, но и правда неплохой. Атмосфера ночной школы, набитой мрачными секретами, удалась на славу — напряжение отпускает редко, а игра то и дело подкидывает сюрпризы там, откуда не ждешь. Я в этом жанре стреляный воробей, а все равно вздрогнуть не раз пришлось.</p>
<p>Местный сюжет меняется в зависимости от действий игрока, и если хочется добраться до конца истории — одним прохождением никак не обойтись. Но, на мой взгляд, оно того стоит. Например, из-за антагониста — это сравнительно редкий случай, когда он вышел в разы интереснее, привлекательнее и трагичнее, чем протагонисты и все остальные герои вместе взятые.</p></description>
        </item>
        
    </channel>
</rss>